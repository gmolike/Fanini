/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './../pages/__root'
import { Route as AppRouteImport } from './../pages/app'
import { Route as PublicRouteImport } from './../pages/_public'
import { Route as AppIndexRouteImport } from './../pages/app/index'
import { Route as PublicIndexRouteImport } from './../pages/_public/index'
import { Route as AppSettingsRouteImport } from './../pages/app/settings'
import { Route as AppProfileRouteImport } from './../pages/app/profile'
import { Route as AppMembersRouteImport } from './../pages/app/members'
import { Route as AppEventsRouteImport } from './../pages/app/events'
import { Route as PublicKontaktRouteImport } from './../pages/_public/kontakt'
import { Route as PublicImpressumRouteImport } from './../pages/_public/impressum'
import { Route as PublicDatenschutzRouteImport } from './../pages/_public/datenschutz'

const AppRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)
const AppSettingsRoute = AppSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRoute,
} as any)
const AppProfileRoute = AppProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AppRoute,
} as any)
const AppMembersRoute = AppMembersRouteImport.update({
  id: '/members',
  path: '/members',
  getParentRoute: () => AppRoute,
} as any)
const AppEventsRoute = AppEventsRouteImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => AppRoute,
} as any)
const PublicKontaktRoute = PublicKontaktRouteImport.update({
  id: '/kontakt',
  path: '/kontakt',
  getParentRoute: () => PublicRoute,
} as any)
const PublicImpressumRoute = PublicImpressumRouteImport.update({
  id: '/impressum',
  path: '/impressum',
  getParentRoute: () => PublicRoute,
} as any)
const PublicDatenschutzRoute = PublicDatenschutzRouteImport.update({
  id: '/datenschutz',
  path: '/datenschutz',
  getParentRoute: () => PublicRoute,
} as any)

export interface FileRoutesByFullPath {
  '/app': typeof AppRouteWithChildren
  '/datenschutz': typeof PublicDatenschutzRoute
  '/impressum': typeof PublicImpressumRoute
  '/kontakt': typeof PublicKontaktRoute
  '/app/events': typeof AppEventsRoute
  '/app/members': typeof AppMembersRoute
  '/app/profile': typeof AppProfileRoute
  '/app/settings': typeof AppSettingsRoute
  '/': typeof PublicIndexRoute
  '/app/': typeof AppIndexRoute
}
export interface FileRoutesByTo {
  '/datenschutz': typeof PublicDatenschutzRoute
  '/impressum': typeof PublicImpressumRoute
  '/kontakt': typeof PublicKontaktRoute
  '/app/events': typeof AppEventsRoute
  '/app/members': typeof AppMembersRoute
  '/app/profile': typeof AppProfileRoute
  '/app/settings': typeof AppSettingsRoute
  '/': typeof PublicIndexRoute
  '/app': typeof AppIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_public': typeof PublicRouteWithChildren
  '/app': typeof AppRouteWithChildren
  '/_public/datenschutz': typeof PublicDatenschutzRoute
  '/_public/impressum': typeof PublicImpressumRoute
  '/_public/kontakt': typeof PublicKontaktRoute
  '/app/events': typeof AppEventsRoute
  '/app/members': typeof AppMembersRoute
  '/app/profile': typeof AppProfileRoute
  '/app/settings': typeof AppSettingsRoute
  '/_public/': typeof PublicIndexRoute
  '/app/': typeof AppIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/app'
    | '/datenschutz'
    | '/impressum'
    | '/kontakt'
    | '/app/events'
    | '/app/members'
    | '/app/profile'
    | '/app/settings'
    | '/'
    | '/app/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/datenschutz'
    | '/impressum'
    | '/kontakt'
    | '/app/events'
    | '/app/members'
    | '/app/profile'
    | '/app/settings'
    | '/'
    | '/app'
  id:
    | '__root__'
    | '/_public'
    | '/app'
    | '/_public/datenschutz'
    | '/_public/impressum'
    | '/_public/kontakt'
    | '/app/events'
    | '/app/members'
    | '/app/profile'
    | '/app/settings'
    | '/_public/'
    | '/app/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PublicRoute: typeof PublicRouteWithChildren
  AppRoute: typeof AppRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof PublicRoute
    }
    '/app/settings': {
      id: '/app/settings'
      path: '/settings'
      fullPath: '/app/settings'
      preLoaderRoute: typeof AppSettingsRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/profile': {
      id: '/app/profile'
      path: '/profile'
      fullPath: '/app/profile'
      preLoaderRoute: typeof AppProfileRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/members': {
      id: '/app/members'
      path: '/members'
      fullPath: '/app/members'
      preLoaderRoute: typeof AppMembersRouteImport
      parentRoute: typeof AppRoute
    }
    '/app/events': {
      id: '/app/events'
      path: '/events'
      fullPath: '/app/events'
      preLoaderRoute: typeof AppEventsRouteImport
      parentRoute: typeof AppRoute
    }
    '/_public/kontakt': {
      id: '/_public/kontakt'
      path: '/kontakt'
      fullPath: '/kontakt'
      preLoaderRoute: typeof PublicKontaktRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/impressum': {
      id: '/_public/impressum'
      path: '/impressum'
      fullPath: '/impressum'
      preLoaderRoute: typeof PublicImpressumRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/datenschutz': {
      id: '/_public/datenschutz'
      path: '/datenschutz'
      fullPath: '/datenschutz'
      preLoaderRoute: typeof PublicDatenschutzRouteImport
      parentRoute: typeof PublicRoute
    }
  }
}

interface PublicRouteChildren {
  PublicDatenschutzRoute: typeof PublicDatenschutzRoute
  PublicImpressumRoute: typeof PublicImpressumRoute
  PublicKontaktRoute: typeof PublicKontaktRoute
  PublicIndexRoute: typeof PublicIndexRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicDatenschutzRoute: PublicDatenschutzRoute,
  PublicImpressumRoute: PublicImpressumRoute,
  PublicKontaktRoute: PublicKontaktRoute,
  PublicIndexRoute: PublicIndexRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

interface AppRouteChildren {
  AppEventsRoute: typeof AppEventsRoute
  AppMembersRoute: typeof AppMembersRoute
  AppProfileRoute: typeof AppProfileRoute
  AppSettingsRoute: typeof AppSettingsRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppEventsRoute: AppEventsRoute,
  AppMembersRoute: AppMembersRoute,
  AppProfileRoute: AppProfileRoute,
  AppSettingsRoute: AppSettingsRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  PublicRoute: PublicRouteWithChildren,
  AppRoute: AppRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
